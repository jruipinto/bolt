import { State, StateContext, NgxsOnInit } from '@ngxs/store';
import { Receiver } from '@ngxs-labs/emitter';
import { patch, updateItem } from '@ngxs/store/operators';
// https://ngxs.gitbook.io/ngxs/advanced/operators#advanced-example
import { DataService } from 'src/app/shared';
import { Injector } from '@angular/core';
import { Assistencia } from 'src/app/shared/models';

/*
export interface AssistenciasStateModel {
    value: number;
}

const defaults = null;

@State<AssistenciasStateModel>({
  name: 'assistencias',
  defaults
})
export class AssistenciasState {

    @Receiver()
    public static setValue(ctx: StateContext<AssistenciasStateModel>, action: EmitterAction<number>) {
        ctx.setState({ value: action.payload });
    }

}
*/
export interface AssistenciaStateModel {
    assistencias: Assistencia[];
}

export class InitAssistencias {
    static readonly type = '[Assistencias] init';
    constructor(public assistencias: Assistencia[]) { }
}

export class UpdateAssistencias {
    static readonly type = '[Assistencias] received update';
    constructor(public assistencias: Assistencia[]) { }
}

@State<AssistenciaStateModel | null>({
    name: 'assistencias',
    defaults: null
})
export class AssistenciasState implements NgxsOnInit {
    // ######### declarations ############
    private static dataService: DataService;
    // private static staticAuthService: AuthService;
    // @Emitter(AssistenciasState.toogleModal) private static staticToogleModal: Emittable<number>;

    constructor(injector: Injector) {
        // the dependency injection with NGXSLabs Emitter is done like this because of the usage of static on @Receiver's
        // TodosState.api = injector.get<ApiService>(ApiService);
        AssistenciasState.dataService = injector.get<DataService>(DataService);
        // AssistenciasState.staticAuthService = injector.get<AuthService>(AuthService);
    }


    /* ################################## @Receiver Funtions #############################################*/
    @Receiver({ action: [InitAssistencias, UpdateAssistencias] })
    public static setValue({ setState }: StateContext<AssistenciaStateModel>, action: InitAssistencias | UpdateAssistencias) {
        // procura o nome do cliente que corresponde com a id de cliente na assistencia
        const assistencias = action.assistencias;
        assistencias.forEach((assistencia, index) => {
            AssistenciasState.dataService.get$('users', assistencia.cliente_user_id)
                .subscribe(e => {
                    Object.assign(assistencias[index], { cliente_user_name: e.nome });
                });
        });

        if (action instanceof InitAssistencias) {
            setState({assistencias: assistencias});
        } else if (action instanceof UpdateAssistencias) {
            setState(
                patch({
                    assistencias: updateItem(assistencia => assistencia.id === assistencias[0].id, assistencias[0])
                })
            );
        }
    }

    /*
    @Receiver()
    public static toogleModal(ctx: StateContext<AssistenciaStateModel>, action: EmitterAction<number>): void {
        // abre e fecha o modal
        const listaIndex: number = action.payload;
        const assistencias: AssistenciaStateModel = ctx.getState();
        if (assistencias[listaIndex].expanded) {
            delete assistencias[listaIndex].expanded;
            return;
        }
        Object.assign(assistencias[listaIndex], { expanded: true });
        ctx.setState(assistencias);
    }

    @Receiver()
    public static saveModal(ctx: StateContext<any>, action: EmitterAction<any>) {
        const estado: string = action.payload.estado;
        const relatorio_interno: string = action.payload.relatorio_interno;
        const relatorio_cliente: string = action.payload.relatorio_cliente;
        const preco: number = action.payload.preco;
        const assistencia_id: number = action.payload.assistencia_id;
        const tecnico_user_id: string = action.payload.tecnico_user_id;
        const lista_index: number = action.payload.lista_index;

        const agora = new Date();
        const alteracao: object = {
            tecnico_user_id: this.staticAuthService.getUserId(),
            estado: estado,
            updatedAt: agora.toLocaleString()
        };

        let parsed_tecnico_user_id: any = JSON.parse(tecnico_user_id);
        if (typeof parsed_tecnico_user_id === 'string') {
            parsed_tecnico_user_id = JSON.parse(parsed_tecnico_user_id);
        }
        parsed_tecnico_user_id.push(alteracao);

        const query = {
            estado: estado,
            relatorio_interno: relatorio_interno,
            relatorio_cliente: relatorio_cliente,
            preco: preco,
            tecnico_user_id: JSON.stringify(parsed_tecnico_user_id)
        };
        this.dataService.patch$('assistencias', query, assistencia_id);

        this.staticToogleModal.emit(lista_index);
    }
    */




    /* #################################### AssistenciasState initialization ######################################### */
    // https://ngxs.gitbook.io/ngxs/advanced/life-cycle

    ngxsOnInit(ctx?: StateContext<AssistenciaStateModel>) {
        const assistencias$ = AssistenciasState.dataService.find$('assistencias', {
            query: {
                $limit: 25
            }
        });

        assistencias$.subscribe(u => {
            // ctx.setState(this.updateAssistencias(u, ctx.getState()));
            if (!ctx.getState()) {
                ctx.dispatch(new InitAssistencias(u.data));
            } else {
                ctx.dispatch(new UpdateAssistencias(u.data));
            }
        });

    }

    /*
    updateAssistencias(u: any, assistencias: Assistencia[]): Assistencia[] {
        // busca e ouve todas as assistencias criadas na DB e coloca no array
        if (!assistencias.length) {
            assistencias = u.data;
        } else {
            const indexOfLastUpdate = u.data.length - 1;
            const indexOfAssistenciaToUpdate = assistencias.findIndex(assistencia => assistencia.id === u.data[indexOfLastUpdate].id);
            if (indexOfAssistenciaToUpdate < 0) {
                assistencias.push(u.data[indexOfLastUpdate]);
            } else {
                Object.assign(assistencias[indexOfAssistenciaToUpdate], u.data[indexOfLastUpdate]);
            }
        }
        assistencias = this.addClientNameById(assistencias);
        return assistencias;
    }

    addClientNameById(assistencias: Assistencia[]): Assistencia[] {
        // procura o nome do cliente que corresponde com a id de cliente na assistencia
        assistencias.forEach((assistencia, index) => {
            AssistenciasState.dataService.get$('users', assistencia.cliente_user_id)
                .subscribe(e => {
                    Object.assign(assistencias[index], { cliente_user_name: e.nome });
                });
        });
        return assistencias;
    }
    */

}
